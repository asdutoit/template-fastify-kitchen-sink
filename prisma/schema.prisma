generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x", "linux-arm64-openssl-1.1.x", "linux-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model photos {
  id               String @id @default(auto()) @map("_id") @db.ObjectId
  href             String
  base64           String
  imagePath        String
  imageFileName    String
  imageName        String
  imageExtension   String
  imageOrientation String
}

model shipwrecks {
  id            String  @id @default(auto()) @map("_id") @db.ObjectId
  chart         String
  coordinates   Float[]
  /// Multiple data types found: Float: 21.6%, Int: 78.4% out of 1000 sampled entries
  depth         Json
  feature_type  String
  gp_quality    String
  history       String
  latdec        Float
  londec        Float
  quasou        String
  recrd         String
  sounding_type String
  vesslterms    String
  watlev        String

  @@index([coordinates], map: "coordinates_2dsphere")
}

model Post {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  slug     String    @unique
  title    String
  body     String
  comments Comment[]
  author   User      @relation(fields: [authorId], references: [id])
  authorId String    @db.ObjectId
}

// Comments contain a comment string and connect back to the post.
// postId must have @db.ObjectId to match up with Post's id type
model Comment {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  post    Post   @relation(fields: [postId], references: [id])
  postId  String @db.ObjectId
  comment String
}

model User {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  email    String  @unique
  name     String?
  salt     String
  password String
  role     Role    @default(USER)
  posts    Post[]
}

enum Role {
  USER
  ADMIN
}
